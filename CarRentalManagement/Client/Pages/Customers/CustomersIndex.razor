@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Customers</h3>

<a href="/customers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />

@if (Customers == null)
{
    <div class="alert alert-info">Loading customers...</div>
}
else
{
    <table class="table table-responsive">
        <thread>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Driving License</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
            <tbody>
                @foreach (var customer in Customers)
                {
                    <tr>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.DrivingLicense</td>
                        <td>@customer.ContactNumber</td>
                        <td>@customer.EmailAddress</td>
                        <td>
                            <a href="/customers/view/@customer.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="() => Delete(customer.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </thread>
    </table>
}

@code {
    private List<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    async Task Delete(int id)
    {
        if (Customers != null)
        {
            var customer = Customers.First(c => c.Id == id);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {customer.FirstName} {customer.LastName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{id}");
                await OnInitializedAsync();
            }
        }
    }
}
