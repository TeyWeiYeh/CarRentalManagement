@page "/makes/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car makes</h3>

@if (Makes == null)
{
    <div class="alert alert-info">Loading Makes...</div>
}
else
{
    <table class="table table-responsive">
        <thread>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
            <tbody>
                @foreach (var make in Makes)
                {
                    <tr>
                        <td>@make.Name</td>
                        <td>
                            <a href="/makes/view/@make.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/makes/edit/@make.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="() => Delete(make.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </thread>
    </table>
}

@code {
    private List<Make>? Makes;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
    }

    async Task Delete(int id)
    {
        if (Makes != null)
        {
            var make = Makes.First(m => m.Id == id);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {make.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.MakesEndpoint}/{id}");
                await OnInitializedAsync();
            }
        }
    }
}
