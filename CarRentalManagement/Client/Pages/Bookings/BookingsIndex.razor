@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Bookings</h3>

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table-responsive">
        <thread>
            <tr>
                <th>Booking ID</th>
                <th>Customer License</th>
                <th>Date</th>
                <th>Duration in days</th>
                <th>Plate Number</th>
                <th>Actions</th>
            </tr>
            <tbody>
                @foreach (var booking in Bookings)
                {
                    <tr>
                        <td>@booking.Id</td>
                        <td>@booking.Customer?.DrivingLicense</td>
                        <td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                        <td>
                            @(booking.DateIn != null ? (booking.DateIn.Value -
                                booking.DateOut).TotalDays.ToString() : "To Be Determined")
                        </td>
                        <td>@booking.Vehicle?.LicensePlateNumber</td>
                        <td>
                            <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="() => Delete(booking.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </thread>
    </table>
}

@code {
    private List<Booking>? Bookings;
    private DateTime nullDT = new DateTime(1,1,1,0,0,0);

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    async Task Delete(int id)
    {
        if (Bookings != null)
        {
            var book = Bookings.First(m => m.Id == id);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {book.Customer} booking?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{id}");
                await OnInitializedAsync();
            }
        }
    }
}